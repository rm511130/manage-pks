#!/bin/bash

set -e

if ! [ -x "$(command -v jq)" ]; then
  echo 'Error: jq is not installed.' >&2
  exit 1
fi

if ! [ -f "${HOME}/.pks/creds.yml" ]; then
  echo "ERROR: Login to PKS API before proceeding" >&2
  exit 1
fi

CLUSTER_REGION=$(gcloud config list --format="value(compute.region)")
if [[ "$CLUSTER_REGION" == "" ]]; then
  echo "Error: Configure GCP region, check step 3 on Instructions!!" >&2
  exit 1
fi

#Function to reserve IP on GCP & create cluster
function provision_cluster {
  echo -e "\nEnter pks cluster name to be created and press [ENTER]: "
  read CLUSTER_NAME

  echo -e "\nListing pks plans..."
  pks list-plans

  echo -e "\nEnter pks plan to be provisioned, choose plan from above list and press [ENTER]: "
  read CLUSTER_PLAN

  LB_NAME="$CLUSTER_NAME-lb"

  echo -n "Reserving public IP for cluster loadbalancer"
  gcloud compute addresses create $LB_NAME --region=$CLUSTER_REGION
  CLUSTER_IP=$(gcloud compute addresses describe $LB_NAME --region=$CLUSTER_REGION --format="value(address)")

  echo -e "\nCreating PKS cluster $CLUSTER_NAME with external hostname $CLUSTER_IP.xip.io"
  pks create-cluster $CLUSTER_NAME --external-hostname $CLUSTER_IP.xip.io -p $CLUSTER_PLAN
}

#Function to enable access to pks cluster on gcp
function enable_access {
  echo -e "Listing available clusters..."
  pks clusters

  echo -e "\nEnter pks cluster name from above list & press [ENTER]: "
  read CLUSTER_NAME

  LB_NAME="$CLUSTER_NAME-lb"
  FORWARDING_RULE="pks-$CLUSTER_NAME-forwarding-rule"
  CLUSTER_REGION=$(gcloud config list --format="value(compute.region)")

  if ! [[ "$(gcloud compute target-pools list --filter="name=$LB_NAME" --format="value(name)")" == "" ]]; then
    echo -e "\nLoad balancer $LB_NAME already exists..."
  else
    echo -e "\nProvisioning load balancer for $CLUSTER_NAME pks cluster"
    gcloud compute target-pools create $LB_NAME \
      --description="Load balancer for $CLUSTER_NAME pks cluster" \
      --region=$CLUSTER_REGION
  fi

  if ! [[ "$(gcloud compute forwarding-rules list --filter="name=$FORWARDING_RULE" --format="value(name)")" == "" ]]; then
    echo -e "\nForwarding rule $FORWARDING_RULE already exists..."
  else
    echo -e "\nConfiguring forwarding rule for $LB_NAME"
    gcloud compute forwarding-rules create $FORWARDING_RULE \
      --region=$CLUSTER_REGION \
      --address=$LB_NAME \
      --target-pool=$LB_NAME \
      --ports=8443
  fi

  echo -e "\nGetting master nodes for pks cluster $CLUSTER_NAME"

  CLUSTER_UUID=$(pks cluster $CLUSTER_NAME --json | jq -r .uuid)
  export BOSH_DEPLOYMENT_NAME=service-instance-$CLUSTER_UUID

  MASTERS=$(mktemp /tmp/master-$CLUSTER_UUID.XXXX)

  gcloud compute instances list --filter="labels.instance_group=master AND labels.deployment=$BOSH_DEPLOYMENT_NAME" \
    --format="csv[no-heading](name,zone,networkInterfaces.network)" > $MASTERS

  IFS=","
  while read -r instance zone network
  do
          echo -e "\nAdding $instance to load balancer $LB_NAME"
          gcloud --quiet compute target-pools add-instances $LB_NAME --instances=$instance --instances-zone=$zone

          echo -e "\nAdding tags for allowing traffic from load balancer"
          gcloud --quiet compute instances add-tags $instance --zone=$zone --tags $CLUSTER_NAME-master-access

  done < "$MASTERS"

  PKS_CLUSTER_NETWORK=$(basename $(head -1 $MASTERS | cut -d',' -f3))
  FW_RULE=$CLUSTER_NAME-fw-master-access

  if ! [[ "$(gcloud compute firewall-rules list --filter="name=$FW_RULE" --format="value(name)")" == "" ]]; then
    echo -e "\nFirewall rule $FW_RULE already exists..."
  else
    echo -e "\nCreating firewall rule from all sources to pks master nodes on port 8443"
    gcloud compute firewall-rules create  $FW_RULE --allow tcp:8443 \
          --description "Allow incoming traffic on TCP port 8443 for pks cluster $CLUSTER_NAME" \
          --target-tags "$CLUSTER_NAME-master-access" \
          --network $PKS_CLUSTER_NETWORK \
          --direction INGRESS
  fi

  rm $MASTERS

  echo -e "\nConfiguring kubectl for creds using pks get-credentials"
  pks get-credentials $CLUSTER_NAME

  echo -e "\nPKS cluster $CLUSTER_NAME information"
  kubectl cluster-info

  echo -e "\nGetting all pods across all namespaces..."
  kubectl get pods --all-namespaces
}

function gcp_cleanup {
  echo -e "Listing available clusters..."
  pks clusters

  echo -e "\nEnter pks cluster name from above list & press [ENTER]: "
  read CLUSTER_NAME

  LB_NAME="$CLUSTER_NAME-lb"
  CLUSTER_REGION=$(gcloud config list --format="value(compute.region)")
  CLUSTER_UUID=$(pks cluster $CLUSTER_NAME --json | jq -r .uuid)

  echo "Deleting firewall rule"
  gcloud compute firewall-rules delete $CLUSTER_NAME-fw-master-access --quiet

  echo "Deleting forwarding rule"
  gcloud compute forwarding-rules delete pks-$CLUSTER_NAME-forwarding-rule --region=$CLUSTER_REGION --quiet

  echo "Deleting target pool/lb"
  gcloud compute target-pools delete $LB_NAME --quiet
}

operation=$1

case $operation in
  provision)
    provision_cluster
    ;;
  access)
    enable_access
    ;;
  cleanup)
    gcp_cleanup
    ;;
  *)
    echo $"Usage: $0 {provision|access|cleanup}"
    exit 1
esac
